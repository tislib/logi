// Code generated by goyacc -o logi.go logi.y. DO NOT EDIT.

//line logi.y:2
package logi

import __yyfmt__ "fmt"

//line logi.y:2

import ()

//line logi.y:9
type yySymType struct {
	yys    int
	node   yaccNode
	bool   bool
	number interface{}
	string string
}

const token_number = 57346
const token_string = 57347
const token_identifier = 57348
const token_bool = 57349
const DefinitionKeyword = 57350
const SyntaxKeyword = 57351
const FuncKeyword = 57352
const BracketOpen = 57353
const BracketClose = 57354
const BraceOpen = 57355
const BraceClose = 57356
const Comma = 57357
const Colon = 57358
const Semicolon = 57359
const Equal = 57360
const GreaterThan = 57361
const LessThan = 57362
const Dot = 57363
const Arrow = 57364
const ParenOpen = 57365
const ParenClose = 57366
const Eol = 57367
const IfKeyword = 57368
const ElseKeyword = 57369
const ReturnKeyword = 57370
const SwitchKeyword = 57371
const CaseKeyword = 57372
const VarKeyword = 57373
const Plus = 57374
const Minus = 57375
const Star = 57376
const Slash = 57377
const Percent = 57378
const Exclamation = 57379
const And = 57380
const Or = 57381
const Xor = 57382

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_number",
	"token_string",
	"token_identifier",
	"token_bool",
	"DefinitionKeyword",
	"SyntaxKeyword",
	"FuncKeyword",
	"BracketOpen",
	"BracketClose",
	"BraceOpen",
	"BraceClose",
	"Comma",
	"Colon",
	"Semicolon",
	"Equal",
	"GreaterThan",
	"LessThan",
	"Dot",
	"Arrow",
	"ParenOpen",
	"ParenClose",
	"Eol",
	"IfKeyword",
	"ElseKeyword",
	"ReturnKeyword",
	"SwitchKeyword",
	"CaseKeyword",
	"VarKeyword",
	"Plus",
	"Minus",
	"Star",
	"Slash",
	"Percent",
	"Exclamation",
	"And",
	"Or",
	"Xor",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line logi.y:400

//		entity User {
//	  		id int [primary, autoincrement]
//	 		name string [required, default "John Doe"]
//	  	}
//
//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 76,
	25, 63,
	-2, 73,
	-1, 100,
	4, 28,
	5, 28,
	6, 28,
	7, 28,
	11, 28,
	13, 28,
	20, 28,
	25, 28,
	-2, 79,
	-1, 101,
	4, 29,
	5, 29,
	6, 29,
	7, 29,
	11, 29,
	13, 29,
	20, 29,
	23, 29,
	25, 29,
	-2, 76,
	-1, 102,
	4, 30,
	5, 30,
	6, 30,
	7, 30,
	11, 30,
	13, 30,
	20, 30,
	23, 30,
	25, 30,
	-2, 77,
	-1, 103,
	4, 31,
	5, 31,
	6, 31,
	7, 31,
	11, 31,
	13, 31,
	20, 31,
	23, 31,
	25, 31,
	-2, 78,
}

const yyPrivate = 57344

const yyLast = 334

var yyAct = [...]uint8{
	41, 32, 77, 33, 98, 4, 54, 9, 12, 13,
	64, 15, 35, 58, 29, 70, 18, 19, 163, 154,
	122, 148, 157, 25, 143, 117, 116, 24, 92, 30,
	153, 156, 51, 57, 14, 7, 59, 56, 109, 110,
	111, 112, 113, 114, 115, 118, 119, 134, 14, 8,
	66, 90, 61, 6, 60, 30, 68, 14, 14, 88,
	89, 59, 14, 94, 86, 85, 81, 87, 7, 129,
	59, 91, 76, 28, 21, 104, 125, 151, 96, 7,
	23, 121, 123, 120, 106, 105, 14, 95, 53, 76,
	76, 86, 85, 81, 87, 147, 127, 52, 59, 128,
	155, 137, 130, 126, 140, 137, 139, 40, 26, 47,
	136, 138, 133, 131, 67, 99, 132, 44, 43, 135,
	45, 55, 142, 141, 22, 20, 124, 17, 146, 16,
	1, 144, 66, 108, 3, 149, 11, 152, 2, 145,
	10, 150, 86, 85, 81, 87, 82, 84, 83, 71,
	75, 158, 74, 73, 159, 160, 72, 69, 161, 63,
	162, 26, 59, 38, 164, 27, 143, 117, 116, 97,
	39, 37, 93, 36, 34, 143, 117, 116, 31, 5,
	109, 110, 111, 112, 113, 114, 115, 118, 119, 109,
	110, 111, 112, 113, 114, 115, 118, 119, 107, 117,
	116, 0, 0, 0, 0, 86, 85, 81, 87, 0,
	0, 0, 109, 110, 111, 112, 113, 114, 115, 118,
	119, 102, 101, 100, 103, 0, 7, 78, 46, 79,
	50, 0, 80, 86, 85, 81, 87, 49, 0, 0,
	48, 0, 14, 78, 0, 79, 0, 0, 80, 44,
	43, 42, 45, 0, 14, 78, 46, 79, 50, 0,
	80, 0, 0, 0, 0, 49, 0, 0, 48, 0,
	14, 44, 43, 42, 45, 0, 0, 0, 46, 0,
	50, 0, 44, 43, 42, 45, 0, 49, 0, 46,
	48, 50, 60, 44, 43, 65, 45, 0, 49, 0,
	46, 48, 50, 7, 0, 0, 0, 0, 0, 49,
	0, 0, 48, 62, 44, 43, 42, 45, 0, 0,
	0, 46, 0, 50, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 48,
}

var yyPact = [...]int16{
	43, 43, 10, 10, 32, 10, 123, -1000, 121, 32,
	10, 10, 32, 32, -1000, 61, 57, -1000, 32, 32,
	-1000, 10, 95, 49, 245, -1000, 10, 73, -1000, -1000,
	115, 278, 267, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10, -1000, 289, 103,
	10, 229, -1000, 10, -1000, 40, 37, 267, 3, -1000,
	-1000, 245, -1000, 63, -1000, 115, 310, 109, 217, 201,
	29, -1000, -1000, -1000, -1000, -1000, -1000, 180, 60, 138,
	120, 53, -1000, -1000, -1000, -1000, -1000, -1000, 23, 115,
	-1000, 3, -1000, 54, 310, -1000, 10, 101, -1000, 113,
	53, -1000, -1000, -1000, 33, 29, 3, 87, 138, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 88, 86, -1000, -1000,
	138, 148, -1000, 157, 115, 138, -1000, 76, 9, 10,
	245, 58, 109, -1000, -1000, 3, 157, -1000, 157, -1000,
	-1000, 6, -8, 83, 82, 7, 157, -1000, -1000, 245,
	-1000, -1000, -1000, 95, 95, 138, -1000, 138, 310, -9,
	-1000, 157, 157, 95, -1000,
}

var yyPgo = [...]uint8{
	0, 6, 138, 179, 109, 178, 1, 3, 174, 173,
	172, 171, 12, 170, 169, 4, 107, 165, 14, 163,
	159, 10, 0, 157, 15, 156, 153, 152, 150, 149,
	2, 148, 147, 146, 20, 139, 134, 133, 130, 5,
	13,
}

var yyR1 = [...]int8{
	0, 39, 39, 39, 40, 40, 38, 38, 38, 38,
	38, 38, 38, 2, 3, 4, 5, 5, 6, 6,
	7, 7, 7, 7, 7, 7, 7, 7, 8, 12,
	12, 12, 9, 10, 10, 10, 11, 13, 14, 14,
	15, 15, 16, 16, 17, 17, 18, 19, 19, 20,
	20, 21, 1, 1, 22, 23, 23, 23, 24, 24,
	24, 24, 24, 29, 25, 26, 26, 26, 26, 27,
	28, 28, 30, 30, 30, 30, 31, 31, 31, 32,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 33, 34, 35, 35, 35, 36,
}

var yyR2 = [...]int8{
	0, 1, 2, 0, 1, 2, 2, 2, 2, 1,
	3, 3, 0, 3, 2, 5, 2, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 5, 1, 4, 0, 1, 5, 1, 3,
	1, 2, 3, 2, 1, 4, 2, 3, 2, 1,
	4, 1, 1, 4, 5, 2, 3, 0, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 3, 5, 2,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 3, 4, 1, 3, 0, 4,
}

var yyChk = [...]int16{
	-1000, -38, -2, -36, -39, -3, 10, 25, 6, -39,
	-2, -36, -39, -39, 25, -39, 6, 6, -39, -39,
	-4, 13, -16, 23, -39, -22, 13, -17, 24, -18,
	6, -5, -6, -7, -8, -12, -9, -11, -19, -13,
	-16, -22, 6, 5, 4, 7, 11, -4, 23, 20,
	13, -39, 24, 15, -1, 6, -39, -6, -40, -7,
	25, -39, 24, -20, -21, 6, -6, 11, -39, -23,
	-24, -29, -25, -26, -27, -28, -34, -30, 26, 28,
	31, 6, -33, -31, -32, 5, 4, 7, -39, 20,
	14, -40, 25, -10, -6, 24, 15, -14, -15, 6,
	6, 5, 4, 7, -39, -24, -40, 18, -37, 32,
	33, 34, 35, 36, 37, 38, 20, 19, 39, 40,
	23, -30, -34, -30, 6, 23, -18, -1, -39, 15,
	-39, 12, 15, -12, 14, -40, -30, 18, -30, 18,
	18, -30, -22, 18, -1, -35, -30, 19, 12, -39,
	-21, 19, -15, 24, 27, 18, 24, 15, -6, -22,
	-22, -30, -30, 27, -22,
}

var yyDef = [...]int8{
	3, -2, 3, 3, 9, 3, 0, 1, 0, 8,
	3, 3, 6, 7, 2, 0, 0, 14, 10, 11,
	13, 3, 0, 0, 0, 99, 3, 0, 43, 44,
	0, 3, 0, 18, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 3, 36, 0, 0,
	3, 57, 42, 3, 46, 52, 0, 0, 16, 19,
	4, 35, 43, 0, 49, 28, 51, 0, 57, 3,
	0, 58, 59, 60, 61, 62, -2, 0, 0, 0,
	0, 79, 72, 74, 75, 76, 77, 78, 0, 0,
	15, 17, 5, 3, 33, 47, 3, 0, 38, 40,
	-2, -2, -2, -2, 0, 0, 55, 0, 0, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	0, 0, 73, 69, 0, 98, 45, 0, 0, 3,
	0, 0, 0, 41, 54, 56, 64, 91, 94, 93,
	92, 0, 67, 0, 70, 0, 96, 53, 32, 0,
	50, 37, 39, 0, 0, 0, 95, 0, 34, 65,
	68, 71, 97, 0, 66,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:53
		{
			registerRootNode(yylex, yyDollar[1].node)
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:56
		{
			registerRootNode(yylex, yyDollar[1].node)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:61
		{
			registerRootNode(yylex, yyDollar[2].node)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:64
		{
			registerRootNode(yylex, yyDollar[2].node)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:70
		{
			yyVAL.node = appendNode(NodeOpDefinition, yyDollar[1].node, yyDollar[3].node)
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:75
		{
			yyVAL.node = appendNode(NodeOpSignature, newNode(NodeOpMacro, yyDollar[1].string), newNode(NodeOpName, yyDollar[2].string))
		}
	case 15:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:82
		{
			yyVAL.node = appendNode(NodeOpBody, yyDollar[3].node)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:87
		{
			yyVAL.node = appendNode(NodeOpStatements, yyDollar[1].node)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:91
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:96
		{
			yyVAL.node = appendNode(NodeOpStatement, yyDollar[1].node)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:100
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:107
		{
			yyVAL.node = newNode(NodeOpIdentifier, yyDollar[1].string)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:112
		{
			yyVAL.node = newNode(NodeOpValue, yyDollar[1].string)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:116
		{
			yyVAL.node = newNode(NodeOpValue, yyDollar[1].number)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:120
		{
			yyVAL.node = newNode(NodeOpValue, yyDollar[1].bool)
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:125
		{
			yyVAL.node = yyDollar[3].node
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:130
		{
			yyVAL.node = appendNode(NodeOpArray, yyDollar[1].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:134
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line logi.y:138
		{
			yyVAL.node = appendNode(NodeOpArray)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:143
		{
			yyVAL.node = appendNode(NodeOpStruct, yyDollar[1].node)
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:148
		{
			yyVAL.node = yyDollar[3].node
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:153
		{
			yyVAL.node = appendNode(NodeOpAttributeList, yyDollar[1].node)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:157
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[3].node)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:162
		{
			yyVAL.node = newNode(NodeOpAttribute, yyDollar[1].string)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:166
		{
			yyVAL.node = newNode(NodeOpAttribute, yyDollar[1].string, yyDollar[2].node)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:171
		{
			yyVAL.node = yyDollar[2].node
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:175
		{
			yyVAL.node = appendNode(NodeOpArgumentList)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:180
		{
			yyVAL.node = appendNode(NodeOpArgumentList, yyDollar[1].node)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:184
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:189
		{
			yyVAL.node = newNode(NodeOpArgument, yyDollar[1].string, yyDollar[2].node)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:194
		{
			yyVAL.node = yyDollar[2].node
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:198
		{
			yyVAL.node = appendNode(NodeOpParameterList)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:203
		{
			yyVAL.node = appendNode(NodeOpParameterList, yyDollar[1].node)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:207
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:212
		{
			yyVAL.node = newNode(NodeOpParameter, yyDollar[1].node)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:218
		{
			yyVAL.node = newNode(NodeOpTypeDef, yyDollar[1].string)
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:222
		{
			yyVAL.node = newNode(NodeOpTypeDef, yyDollar[1].string, yyDollar[3].node)
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:230
		{
			yyVAL.node = appendNode(NodeOpCodeBlock, yyDollar[3].node)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:235
		{
			yyVAL.node = appendNode(NodeOpStatements, yyDollar[1].node)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:239
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line logi.y:243
		{
			yyVAL.node = appendNode(NodeOpStatements)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:252
		{
			yyVAL.node = appendNode(NodeOpFunctionCall, yyDollar[1].node)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:257
		{
			yyVAL.node = appendNode(NodeOpAssignment, yyDollar[1].node, yyDollar[3].node)
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:262
		{
			yyVAL.node = appendNode(NodeOpIf, yyDollar[3].node, yyDollar[5].node)
		}
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
//line logi.y:266
		{
			yyVAL.node = appendNode(NodeOpIfElse, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:270
		{
			yyVAL.node = appendNode(NodeOpIf, yyDollar[2].node, yyDollar[3].node)
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:274
		{
			yyVAL.node = appendNode(NodeOpIfElse, yyDollar[2].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:279
		{
			yyVAL.node = appendNode(NodeOpReturn, yyDollar[2].node)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:284
		{
			yyVAL.node = appendNode(NodeOpVariableDeclaration, newNode(NodeOpName, yyDollar[2].string), yyDollar[3].node)
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:288
		{
			yyVAL.node = appendNode(NodeOpVariableDeclaration, newNode(NodeOpName, yyDollar[2].string), yyDollar[3].node, yyDollar[5].node)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:297
		{
			yyVAL.node = newNode(NodeOpLiteral, yyDollar[1].string)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:301
		{
			yyVAL.node = newNode(NodeOpLiteral, yyDollar[1].number)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:305
		{
			yyVAL.node = newNode(NodeOpLiteral, yyDollar[1].bool)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:310
		{
			yyVAL.node = newNode(NodeOpVariable, yyDollar[1].string)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:314
		{
			yyVAL.string = "+"
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:317
		{
			yyVAL.string = "-"
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:321
		{
			yyVAL.string = "*"
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:325
		{
			yyVAL.string = "/"
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:329
		{
			yyVAL.string = "%"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:333
		{
			yyVAL.string = "!"
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:337
		{
			yyVAL.string = "&&"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:341
		{
			yyVAL.string = "<"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:345
		{
			yyVAL.string = ">"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:349
		{
			yyVAL.string = "||"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:353
		{
			yyVAL.string = "^"
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:357
		{
			yyVAL.string = "=="
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:361
		{
			yyVAL.string = ">="
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:365
		{
			yyVAL.string = "<="
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:370
		{
			yyVAL.node = appendNode(NodeOpBinaryExpression, yyDollar[1].node, yyDollar[3].node, newNode(NodeOpOperator, yyDollar[2].string))
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:375
		{
			yyVAL.node = newNode(NodeOpFunctionCall, yyDollar[1].string, yyDollar[3].node)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:380
		{
			yyVAL.node = appendNode(NodeOpFunctionParams, yyDollar[1].node)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:384
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[3].node)
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line logi.y:388
		{
			yyVAL.node = appendNode(NodeOpFunctionParams)
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:396
		{
			yyVAL.node = appendNode(NodeOpFunctionDefinition, newNode(NodeOpName, yyDollar[2].string), yyDollar[3].node, yyDollar[4].node)
		}
	}
	goto yystack /* stack new state and value */
}
