// Code generated by goyacc -o logi.go logi.y. DO NOT EDIT.

//line logi.y:2
package logi

import __yyfmt__ "fmt"

//line logi.y:2

import (
	"github.com/tislib/logi/pkg/parser/lexer"
)

//line logi.y:10
type yySymType struct {
	yys      int
	node     yaccNode
	bool     bool
	number   interface{}
	string   string
	token    lexer.Token
	location lexer.Location
}

const token_number = 57346
const token_string = 57347
const token_identifier = 57348
const token_bool = 57349
const DefinitionKeyword = 57350
const SyntaxKeyword = 57351
const FuncKeyword = 57352
const BracketOpen = 57353
const BracketClose = 57354
const BraceOpen = 57355
const BraceClose = 57356
const Comma = 57357
const Colon = 57358
const Semicolon = 57359
const Equal = 57360
const GreaterThan = 57361
const LessThan = 57362
const Dot = 57363
const Arrow = 57364
const ParenOpen = 57365
const ParenClose = 57366
const Eol = 57367
const Plus = 57368
const Minus = 57369
const Star = 57370
const Slash = 57371
const Percent = 57372
const Exclamation = 57373
const And = 57374
const Or = 57375
const Xor = 57376

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_number",
	"token_string",
	"token_identifier",
	"token_bool",
	"DefinitionKeyword",
	"SyntaxKeyword",
	"FuncKeyword",
	"BracketOpen",
	"BracketClose",
	"BraceOpen",
	"BraceClose",
	"Comma",
	"Colon",
	"Semicolon",
	"Equal",
	"GreaterThan",
	"LessThan",
	"Dot",
	"Arrow",
	"ParenOpen",
	"ParenClose",
	"Eol",
	"Plus",
	"Minus",
	"Star",
	"Slash",
	"Percent",
	"Exclamation",
	"And",
	"Or",
	"Xor",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line logi.y:438

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 251

var yyAct = [...]uint8{
	3, 34, 7, 9, 126, 10, 18, 93, 99, 12,
	71, 53, 54, 17, 52, 15, 44, 42, 61, 60,
	55, 62, 147, 5, 45, 112, 96, 6, 116, 91,
	43, 123, 5, 47, 90, 5, 5, 48, 49, 98,
	122, 91, 65, 89, 86, 85, 5, 118, 97, 143,
	45, 78, 79, 80, 81, 82, 83, 84, 87, 88,
	67, 69, 76, 74, 64, 63, 14, 107, 106, 95,
	105, 75, 73, 113, 90, 101, 45, 102, 128, 127,
	130, 129, 124, 66, 148, 134, 100, 133, 114, 33,
	103, 72, 121, 111, 11, 140, 2, 115, 8, 117,
	13, 1, 77, 108, 110, 61, 60, 104, 62, 109,
	144, 132, 92, 125, 120, 131, 119, 23, 57, 56,
	59, 58, 27, 51, 25, 50, 24, 137, 136, 135,
	70, 26, 20, 139, 141, 142, 138, 22, 68, 21,
	19, 16, 45, 4, 131, 146, 0, 145, 149, 0,
	0, 131, 0, 0, 150, 30, 29, 28, 31, 0,
	0, 0, 32, 0, 41, 0, 0, 40, 0, 38,
	36, 37, 0, 0, 35, 0, 46, 0, 39, 30,
	29, 28, 31, 0, 0, 0, 32, 0, 41, 0,
	0, 40, 0, 38, 36, 37, 0, 0, 35, 0,
	5, 0, 39, 30, 29, 28, 31, 0, 0, 0,
	32, 0, 41, 0, 0, 40, 0, 38, 36, 37,
	0, 0, 35, 0, 0, 0, 39, 30, 94, 28,
	31, 0, 0, 0, 32, 0, 41, 0, 0, 40,
	0, 38, 36, 37, 0, 0, 35, 0, 0, 0,
	39,
}

var yyPact = [...]int16{
	21, 21, -2, -1000, -2, -1000, 88, -1000, -2, -1000,
	53, -1000, -1000, -1000, -2, 199, 175, 151, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -2, -1000, -1000, 14, -1000, -1000, 46, 45,
	-1000, -2, 69, 151, -1000, -1000, -1000, 199, 85, -1000,
	48, 47, -1000, -1000, 25, 18, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 223, -1000, -1000, 11, 199,
	24, -1000, 80, -1000, -2, -1000, -2, 101, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52, 50, -1000, -1000, 49,
	101, 101, 10, -1000, 57, 76, -2, 4, -2, -1000,
	27, 101, 86, 25, 6, -1000, -1000, -1000, 25, 16,
	25, 68, -2, 74, -1000, 199, -1000, 85, 80, -1000,
	-1000, 58, -1000, 101, -1000, 90, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -2, -2, 199, -1000, 30, 25, -1000,
	57, 90, 74, -1000, 7, -1000, 72, -2, -1000, 74,
	-1000,
}

var yyPgo = [...]uint8{
	0, 8, 96, 143, 89, 141, 13, 6, 140, 139,
	138, 137, 132, 132, 132, 132, 131, 130, 10, 126,
	125, 14, 124, 123, 11, 122, 12, 121, 120, 119,
	118, 117, 1, 112, 7, 111, 4, 110, 109, 102,
	101, 0, 16,
}

var yyR1 = [...]int8{
	0, 41, 41, 42, 40, 40, 40, 40, 40, 2,
	3, 4, 5, 5, 6, 6, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 8, 12, 12, 12, 9,
	10, 10, 10, 11, 31, 32, 33, 33, 33, 34,
	36, 36, 36, 36, 36, 36, 35, 37, 37, 37,
	13, 14, 14, 15, 15, 16, 16, 17, 17, 18,
	19, 19, 20, 20, 21, 22, 22, 23, 23, 24,
	25, 25, 25, 25, 25, 1, 1, 26, 26, 26,
	26, 27, 27, 27, 28, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 29,
	30, 38, 38, 38,
}

var yyR2 = [...]int8{
	0, 1, 0, 1, 2, 2, 1, 3, 0, 3,
	2, 5, 2, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 5,
	1, 4, 0, 1, 1, 5, 1, 4, 0, 3,
	1, 1, 1, 1, 1, 1, 5, 1, 4, 0,
	5, 1, 3, 1, 2, 5, 2, 1, 4, 2,
	3, 2, 1, 4, 1, 3, 2, 1, 4, 3,
	1, 1, 2, 2, 1, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 3,
	4, 1, 3, 0,
}

var yyChk = [...]int16{
	-1000, -40, -2, -41, -3, 25, 6, -41, -2, -41,
	-41, 6, -41, -4, 13, -41, -5, -6, -7, -8,
	-12, -9, -11, -31, -19, -22, -16, -25, 6, 5,
	4, 7, 11, -4, -32, 23, 19, 20, 18, 27,
	16, 13, -41, -6, -42, -7, 25, -41, 23, 24,
	-20, -23, -21, -24, -26, 6, -29, -30, -27, -28,
	5, 4, 7, 19, 19, -41, 14, -42, -10, -6,
	-17, -18, 6, 24, 15, 24, 15, -39, 26, 27,
	28, 29, 30, 31, 32, 20, 19, 33, 34, 18,
	16, 23, -33, -34, 5, -41, 15, 24, 15, -1,
	6, -41, -41, -26, 6, 18, 18, 18, -26, -38,
	-26, -41, 15, 16, 12, -41, 24, -41, 20, -21,
	-24, 6, 24, 15, 14, -41, -36, 5, 4, 7,
	6, -32, -35, 13, 11, -6, -18, -1, -26, -34,
	5, -41, -41, 19, -37, -36, -41, 15, 12, -41,
	-36,
}

var yyDef = [...]int8{
	2, -2, 2, 6, 2, 1, 0, 5, 2, 4,
	0, 10, 7, 9, 2, 0, 2, 0, 14, 16,
	17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
	27, 28, 2, 33, 34, 0, 70, 71, 0, 0,
	74, 2, 0, 0, 12, 15, 3, 32, 0, 56,
	0, 0, 62, 67, 64, 84, 77, 78, 79, 80,
	81, 82, 83, 72, 73, 38, 11, 13, 2, 30,
	0, 57, 0, 60, 2, 65, 2, 0, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 0,
	0, 103, 2, 36, 26, 0, 2, 0, 2, 59,
	75, 0, 0, 99, 84, 98, 97, 96, 69, 0,
	101, 0, 2, 0, 29, 0, 55, 0, 0, 63,
	68, 0, 100, 0, 35, 0, 39, 40, 41, 42,
	43, 44, 45, 2, 2, 31, 58, 0, 102, 37,
	0, 38, 49, 76, 2, 47, 0, 2, 46, 0,
	48,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:52
		{
			registerRootNode(yylex, yyDollar[1].node)
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:57
		{
			registerRootNode(yylex, yyDollar[2].node)
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:63
		{
			yyVAL.node = appendNode(NodeOpDefinition, yyDollar[1].node, yyDollar[3].node)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:68
		{
			yyVAL.node = appendNode(NodeOpSignature, newNode(NodeOpMacro, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location), newNode(NodeOpName, yyDollar[2].string, yyDollar[2].token, yyDollar[2].location))
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:75
		{
			yyVAL.node = appendNode(NodeOpBody, yyDollar[3].node)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:80
		{
			yyVAL.node = appendNode(NodeOpStatements, yyDollar[1].node)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:84
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:89
		{
			yyVAL.node = appendNode(NodeOpStatement, yyDollar[1].node)
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:93
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:100
		{
			yyVAL.node = newNode(NodeOpIdentifier, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:105
		{
			yyVAL.node = newNode(NodeOpValue, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:109
		{
			yyVAL.node = newNode(NodeOpValue, yyDollar[1].number, yyDollar[1].token, yyDollar[1].location)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:113
		{
			yyVAL.node = newNode(NodeOpValue, yyDollar[1].bool, yyDollar[1].token, yyDollar[1].location)
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:118
		{
			yyVAL.node = yyDollar[3].node
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:123
		{
			yyVAL.node = appendNode(NodeOpArray, yyDollar[1].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:127
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line logi.y:131
		{
			yyVAL.node = appendNode(NodeOpArray)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:136
		{
			yyVAL.node = appendNode(NodeOpStruct, yyDollar[1].node)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:141
		{
			yyVAL.node = yyDollar[1].node
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:146
		{
			yyVAL.node = yyDollar[3].node
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:151
		{
			yyVAL.node = appendNode(NodeOpJsonObject, yyDollar[1].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:154
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
//line logi.y:157
		{
			yyVAL.node = appendNode(NodeOpJsonObject)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:162
		{
			yyVAL.node = newNode(NodeOpJsonObjectItem, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location, yyDollar[3].node)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:167
		{
			yyVAL.node = newNode(NodeOpJsonObjectItemValue, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:170
		{
			yyVAL.node = newNode(NodeOpJsonObjectItemValue, yyDollar[1].number, yyDollar[1].token, yyDollar[1].location)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:173
		{
			yyVAL.node = newNode(NodeOpJsonObjectItemValue, yyDollar[1].bool, yyDollar[1].token, yyDollar[1].location)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:176
		{
			yyVAL.node = newNode(NodeOpJsonIdentifier, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:179
		{
			yyVAL.node = yyDollar[1].node
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:182
		{
			yyVAL.node = yyDollar[1].node
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:187
		{
			yyVAL.node = yyDollar[3].node
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:192
		{
			yyVAL.node = appendNode(NodeOpJsonArray, yyDollar[1].node)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:195
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line logi.y:198
		{
			yyVAL.node = appendNode(NodeOpJsonArray)
		}
	case 50:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:204
		{
			yyVAL.node = yyDollar[3].node
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:209
		{
			yyVAL.node = appendNode(NodeOpAttributeList, yyDollar[1].node)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:213
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[3].node)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:218
		{
			yyVAL.node = newNode(NodeOpAttribute, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:222
		{
			yyVAL.node = newNode(NodeOpAttribute, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location, yyDollar[2].node)
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:227
		{
			yyVAL.node = yyDollar[3].node
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:231
		{
			yyVAL.node = appendNode(NodeOpArgumentList)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:236
		{
			yyVAL.node = appendNode(NodeOpArgumentList, yyDollar[1].node)
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:240
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:245
		{
			yyVAL.node = newNode(NodeOpArgument, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location, yyDollar[2].node)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:250
		{
			yyVAL.node = yyDollar[2].node
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:254
		{
			yyVAL.node = appendNode(NodeOpParameterList)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:259
		{
			yyVAL.node = appendNode(NodeOpParameterList, yyDollar[1].node)
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:263
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:268
		{
			yyVAL.node = yyDollar[1].node
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:273
		{
			yyVAL.node = yyDollar[2].node
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:277
		{
			yyVAL.node = appendNode(NodeOpNamedParameterList)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:282
		{
			yyVAL.node = appendNode(NodeOpNamedParameterList, yyDollar[1].node)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:286
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:291
		{
			yyVAL.node = newNode(NodeOpNamedParameter, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location, yyDollar[3].node)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:296
		{
			yyVAL.node = newNode(NodeOpSyntaxSymbolElement, ">", yyDollar[1].token, yyDollar[1].location)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:299
		{
			yyVAL.node = newNode(NodeOpSyntaxSymbolElement, "<", yyDollar[1].token, yyDollar[1].location)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:302
		{
			yyVAL.node = newNode(NodeOpSyntaxSymbolElement, "=>", yyDollar[1].token, yyDollar[1].location)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:305
		{
			yyVAL.node = newNode(NodeOpSyntaxSymbolElement, "->", yyDollar[1].token, yyDollar[1].location)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:308
		{
			yyVAL.node = newNode(NodeOpSyntaxSymbolElement, ":", yyDollar[1].token, yyDollar[1].location)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:314
		{
			yyVAL.node = newNode(NodeOpTypeDef, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:318
		{
			yyVAL.node = newNode(NodeOpTypeDef, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location, yyDollar[3].node)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:325
		{
			yyVAL.node = appendNode(NodeOpExpression, yyDollar[1].node)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:329
		{
			yyVAL.node = appendNode(NodeOpExpression, yyDollar[1].node)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:333
		{
			yyVAL.node = appendNode(NodeOpExpression, yyDollar[1].node)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:337
		{
			yyVAL.node = appendNode(NodeOpExpression, yyDollar[1].node)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:342
		{
			yyVAL.node = newNode(NodeOpLiteral, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:346
		{
			yyVAL.node = newNode(NodeOpLiteral, yyDollar[1].number, yyDollar[1].token, yyDollar[1].location)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:350
		{
			yyVAL.node = newNode(NodeOpLiteral, yyDollar[1].bool, yyDollar[1].token, yyDollar[1].location)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:355
		{
			yyVAL.node = newNode(NodeOpVariable, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:359
		{
			yyVAL.string = "+"
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:362
		{
			yyVAL.string = "-"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:366
		{
			yyVAL.string = "*"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:370
		{
			yyVAL.string = "/"
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:374
		{
			yyVAL.string = "%"
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:378
		{
			yyVAL.string = "!"
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:382
		{
			yyVAL.string = "&&"
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:386
		{
			yyVAL.string = "<"
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:390
		{
			yyVAL.string = ">"
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:394
		{
			yyVAL.string = "||"
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:398
		{
			yyVAL.string = "^"
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:402
		{
			yyVAL.string = "=="
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:406
		{
			yyVAL.string = ">="
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:410
		{
			yyVAL.string = "<="
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:415
		{
			yyVAL.node = appendNode(NodeOpBinaryExpression, yyDollar[1].node, yyDollar[3].node, newNode(NodeOpOperator, yyDollar[2].string, yyDollar[2].token, yyDollar[2].location))
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:420
		{
			yyVAL.node = newNode(NodeOpFunctionCall, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location, yyDollar[3].node)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:425
		{
			yyVAL.node = appendNode(NodeOpFunctionParams, yyDollar[1].node)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:429
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[3].node)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line logi.y:433
		{
			yyVAL.node = appendNode(NodeOpFunctionParams)
		}
	}
	goto yystack /* stack new state and value */
}
