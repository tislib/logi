// Code generated by goyacc -o logi.go logi.y. DO NOT EDIT.

//line logi.y:2
package logi

import __yyfmt__ "fmt"

//line logi.y:2

import ()

//line logi.y:9
type yySymType struct {
	yys    int
	node   yaccNode
	bool   bool
	number interface{}
	string string
}

const token_number = 57346
const token_string = 57347
const token_identifier = 57348
const token_bool = 57349
const DefinitionKeyword = 57350
const SyntaxKeyword = 57351
const FuncKeyword = 57352
const BracketOpen = 57353
const BracketClose = 57354
const BraceOpen = 57355
const BraceClose = 57356
const Comma = 57357
const Colon = 57358
const Semicolon = 57359
const Equal = 57360
const GreaterThan = 57361
const LessThan = 57362
const Dot = 57363
const Arrow = 57364
const ParenOpen = 57365
const ParenClose = 57366
const Eol = 57367
const IfKeyword = 57368
const ElseKeyword = 57369
const ReturnKeyword = 57370
const SwitchKeyword = 57371
const CaseKeyword = 57372
const VarKeyword = 57373
const Plus = 57374
const Minus = 57375
const Star = 57376
const Slash = 57377
const Percent = 57378
const Exclamation = 57379
const And = 57380
const Or = 57381
const Xor = 57382

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_number",
	"token_string",
	"token_identifier",
	"token_bool",
	"DefinitionKeyword",
	"SyntaxKeyword",
	"FuncKeyword",
	"BracketOpen",
	"BracketClose",
	"BraceOpen",
	"BraceClose",
	"Comma",
	"Colon",
	"Semicolon",
	"Equal",
	"GreaterThan",
	"LessThan",
	"Dot",
	"Arrow",
	"ParenOpen",
	"ParenClose",
	"Eol",
	"IfKeyword",
	"ElseKeyword",
	"ReturnKeyword",
	"SwitchKeyword",
	"CaseKeyword",
	"VarKeyword",
	"Plus",
	"Minus",
	"Star",
	"Slash",
	"Percent",
	"Exclamation",
	"And",
	"Or",
	"Xor",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line logi.y:395

//		entity User {
//	  		id int [primary, autoincrement]
//	 		name string [required, default "John Doe"]
//	  	}
//
//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 72,
	25, 61,
	-2, 71,
}

const yyPrivate = 57344

const yyLast = 287

var yyAct = [...]uint8{
	40, 63, 73, 33, 94, 4, 51, 9, 12, 13,
	61, 15, 35, 55, 29, 114, 18, 19, 66, 155,
	146, 121, 88, 25, 7, 57, 32, 24, 135, 109,
	108, 7, 48, 54, 145, 117, 56, 53, 82, 81,
	77, 83, 101, 102, 103, 104, 105, 106, 107, 110,
	111, 58, 82, 81, 77, 83, 84, 112, 56, 140,
	90, 14, 23, 21, 72, 30, 85, 56, 87, 147,
	30, 96, 14, 7, 74, 14, 75, 113, 115, 76,
	98, 72, 126, 28, 97, 82, 81, 77, 83, 14,
	143, 149, 119, 14, 56, 120, 139, 8, 122, 118,
	148, 6, 128, 130, 92, 129, 14, 74, 125, 75,
	86, 127, 76, 91, 134, 133, 7, 50, 132, 131,
	138, 14, 39, 136, 26, 123, 49, 141, 124, 144,
	64, 95, 52, 142, 82, 81, 77, 83, 116, 22,
	17, 43, 42, 150, 44, 16, 151, 152, 129, 3,
	153, 11, 154, 26, 56, 2, 156, 10, 135, 109,
	108, 82, 81, 77, 83, 1, 100, 135, 109, 108,
	137, 78, 101, 102, 103, 104, 105, 106, 107, 110,
	111, 101, 102, 103, 104, 105, 106, 107, 110, 111,
	99, 109, 108, 80, 79, 67, 71, 70, 69, 68,
	65, 60, 37, 27, 101, 102, 103, 104, 105, 106,
	107, 110, 111, 43, 42, 41, 44, 93, 38, 89,
	45, 36, 26, 34, 43, 42, 41, 44, 31, 47,
	20, 45, 46, 26, 14, 43, 42, 41, 44, 5,
	47, 0, 45, 46, 26, 57, 43, 42, 62, 44,
	0, 47, 0, 45, 46, 26, 7, 0, 0, 0,
	0, 0, 47, 0, 0, 46, 59, 43, 42, 41,
	44, 0, 0, 0, 45, 0, 26, 0, 0, 0,
	0, 0, 0, 47, 0, 0, 46,
}

var yyPact = [...]int16{
	91, 91, -1, -1, 36, -1, 139, -1000, 134, 36,
	-1, -1, 36, 36, -1000, 50, 39, -1000, 36, 36,
	-1000, -1, 111, 59, 209, -1000, -1, 102, -1000, -1000,
	126, 231, 220, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1, 242, 119, 81, -1000,
	-1, -1000, 46, 96, 220, -3, -1000, -1000, 209, -1000,
	89, -1000, 126, 263, 125, 48, 0, -1000, -1000, -1000,
	-1000, -1000, -1000, 172, 34, 157, 132, 12, -1000, -1000,
	-1000, -1000, -1000, -1000, 64, 126, -1000, -3, -1000, 6,
	263, -1000, -1, 113, -1000, 137, 68, 0, -3, 130,
	157, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 101, 100,
	-1000, -1000, 157, 140, -1000, 149, 126, 157, -1000, 77,
	47, -1, 209, 71, 125, -1000, -1000, -3, 149, -1000,
	149, -1000, -1000, 10, -7, 87, 51, 76, 149, -1000,
	-1000, 209, -1000, -1000, -1000, 111, 111, 157, -1000, 157,
	263, -8, -1000, 149, 149, 111, -1000,
}

var yyPgo = [...]uint8{
	0, 6, 155, 239, 230, 228, 1, 3, 223, 221,
	219, 12, 218, 217, 4, 122, 203, 14, 202, 201,
	10, 0, 200, 18, 199, 198, 197, 196, 195, 2,
	194, 193, 171, 15, 170, 149, 166, 165, 5, 13,
}

var yyR1 = [...]int8{
	0, 38, 38, 38, 39, 39, 37, 37, 37, 37,
	37, 37, 37, 2, 3, 4, 5, 5, 6, 6,
	7, 7, 7, 7, 7, 7, 7, 8, 11, 11,
	11, 9, 10, 10, 10, 12, 13, 13, 14, 14,
	15, 15, 16, 16, 17, 18, 18, 19, 19, 20,
	1, 1, 21, 22, 22, 22, 23, 23, 23, 23,
	23, 28, 24, 25, 25, 25, 25, 26, 27, 27,
	29, 29, 29, 29, 30, 30, 30, 31, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 32, 33, 34, 34, 34, 35,
}

var yyR2 = [...]int8{
	0, 1, 2, 0, 1, 2, 2, 2, 2, 1,
	3, 3, 0, 3, 2, 5, 2, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 5, 1, 4, 0, 5, 1, 3, 1, 2,
	3, 2, 1, 4, 2, 3, 2, 1, 4, 1,
	1, 4, 5, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 3, 5, 7, 3, 5, 2, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 3, 4, 1, 3, 0, 4,
}

var yyChk = [...]int16{
	-1000, -37, -2, -35, -38, -3, 10, 25, 6, -38,
	-2, -35, -38, -38, 25, -38, 6, 6, -38, -38,
	-4, 13, -15, 23, -38, -21, 13, -16, 24, -17,
	6, -5, -6, -7, -8, -11, -9, -18, -12, -15,
	-21, 6, 5, 4, 7, 11, 23, 20, -38, 24,
	15, -1, 6, -38, -6, -39, -7, 25, -38, 24,
	-19, -20, 6, -6, 11, -22, -23, -28, -24, -25,
	-26, -27, -33, -29, 26, 28, 31, 6, -32, -30,
	-31, 5, 4, 7, -38, 20, 14, -39, 25, -10,
	-6, 24, 15, -13, -14, 6, -38, -23, -39, 18,
	-36, 32, 33, 34, 35, 36, 37, 38, 20, 19,
	39, 40, 23, -29, -33, -29, 6, 23, -17, -1,
	-38, 15, -38, 12, 15, -11, 14, -39, -29, 18,
	-29, 18, 18, -29, -21, 18, -1, -34, -29, 19,
	12, -38, -20, 19, -14, 24, 27, 18, 24, 15,
	-6, -21, -21, -29, -29, 27, -21,
}

var yyDef = [...]int8{
	3, -2, 3, 3, 9, 3, 0, 1, 0, 8,
	3, 3, 6, 7, 2, 0, 0, 14, 10, 11,
	13, 3, 0, 0, 0, 97, 3, 0, 41, 42,
	0, 3, 0, 18, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 3, 0, 0, 55, 40,
	3, 44, 50, 0, 0, 16, 19, 4, 34, 41,
	0, 47, 27, 49, 0, 3, 0, 56, 57, 58,
	59, 60, -2, 0, 0, 0, 0, 77, 70, 72,
	73, 74, 75, 76, 0, 0, 15, 17, 5, 3,
	32, 45, 3, 0, 36, 38, 0, 0, 53, 0,
	0, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 0, 0, 71, 67, 0, 96, 43, 0,
	0, 3, 0, 0, 0, 39, 52, 54, 62, 89,
	92, 91, 90, 0, 65, 0, 68, 0, 94, 51,
	31, 0, 48, 35, 37, 0, 0, 0, 93, 0,
	33, 63, 66, 69, 95, 0, 64,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:53
		{
			registerRootNode(yylex, yyDollar[1].node)
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:56
		{
			registerRootNode(yylex, yyDollar[1].node)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:61
		{
			registerRootNode(yylex, yyDollar[2].node)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:64
		{
			registerRootNode(yylex, yyDollar[2].node)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:70
		{
			yyVAL.node = appendNode(NodeOpDefinition, yyDollar[1].node, yyDollar[3].node)
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:75
		{
			yyVAL.node = appendNode(NodeOpSignature, newNode(NodeOpMacro, yyDollar[1].string), newNode(NodeOpName, yyDollar[2].string))
		}
	case 15:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:82
		{
			yyVAL.node = appendNode(NodeOpBody, yyDollar[3].node)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:87
		{
			yyVAL.node = appendNode(NodeOpStatements, yyDollar[1].node)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:91
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:96
		{
			yyVAL.node = appendNode(NodeOpStatement, yyDollar[1].node)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:100
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:107
		{
			yyVAL.node = newNode(NodeOpIdentifier, yyDollar[1].string)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:112
		{
			yyVAL.node = newNode(NodeOpValue, yyDollar[1].string)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:116
		{
			yyVAL.node = newNode(NodeOpValue, yyDollar[1].number)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:120
		{
			yyVAL.node = newNode(NodeOpValue, yyDollar[1].bool)
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:125
		{
			yyVAL.node = yyDollar[3].node
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:130
		{
			yyVAL.node = appendNode(NodeOpArray, yyDollar[1].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:134
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
//line logi.y:138
		{
			yyVAL.node = appendNode(NodeOpArray)
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:143
		{
			yyVAL.node = yyDollar[3].node
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:148
		{
			yyVAL.node = appendNode(NodeOpAttributeList, yyDollar[1].node)
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:152
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[3].node)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:157
		{
			yyVAL.node = newNode(NodeOpAttribute, yyDollar[1].string)
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:161
		{
			yyVAL.node = newNode(NodeOpAttribute, yyDollar[1].string, yyDollar[2].node)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:166
		{
			yyVAL.node = yyDollar[2].node
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:170
		{
			yyVAL.node = appendNode(NodeOpArgumentList)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:175
		{
			yyVAL.node = appendNode(NodeOpArgumentList, yyDollar[1].node)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:179
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:184
		{
			yyVAL.node = newNode(NodeOpArgument, yyDollar[1].string, yyDollar[2].node)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:189
		{
			yyVAL.node = yyDollar[2].node
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:193
		{
			yyVAL.node = appendNode(NodeOpParameterList)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:198
		{
			yyVAL.node = appendNode(NodeOpParameterList, yyDollar[1].node)
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:202
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:207
		{
			yyVAL.node = newNode(NodeOpParameter, yyDollar[1].node)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:213
		{
			yyVAL.node = newNode(NodeOpTypeDef, yyDollar[1].string)
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:217
		{
			yyVAL.node = newNode(NodeOpTypeDef, yyDollar[1].string, yyDollar[3].node)
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:225
		{
			yyVAL.node = appendNode(NodeOpCodeBlock, yyDollar[3].node)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:230
		{
			yyVAL.node = appendNode(NodeOpStatements, yyDollar[1].node)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:234
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
//line logi.y:238
		{
			yyVAL.node = appendNode(NodeOpStatements)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:247
		{
			yyVAL.node = appendNode(NodeOpFunctionCall, yyDollar[1].node)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:252
		{
			yyVAL.node = appendNode(NodeOpAssignment, yyDollar[1].node, yyDollar[3].node)
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:257
		{
			yyVAL.node = appendNode(NodeOpIf, yyDollar[3].node, yyDollar[5].node)
		}
	case 64:
		yyDollar = yyS[yypt-7 : yypt+1]
//line logi.y:261
		{
			yyVAL.node = appendNode(NodeOpIfElse, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:265
		{
			yyVAL.node = appendNode(NodeOpIf, yyDollar[2].node, yyDollar[3].node)
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:269
		{
			yyVAL.node = appendNode(NodeOpIfElse, yyDollar[2].node, yyDollar[3].node, yyDollar[5].node)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:274
		{
			yyVAL.node = appendNode(NodeOpReturn, yyDollar[2].node)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:279
		{
			yyVAL.node = appendNode(NodeOpVariableDeclaration, newNode(NodeOpName, yyDollar[2].string), yyDollar[3].node)
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
//line logi.y:283
		{
			yyVAL.node = appendNode(NodeOpVariableDeclaration, newNode(NodeOpName, yyDollar[2].string), yyDollar[3].node, yyDollar[5].node)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:292
		{
			yyVAL.node = newNode(NodeOpLiteral, yyDollar[1].string)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:296
		{
			yyVAL.node = newNode(NodeOpLiteral, yyDollar[1].number)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:300
		{
			yyVAL.node = newNode(NodeOpLiteral, yyDollar[1].bool)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:305
		{
			yyVAL.node = newNode(NodeOpVariable, yyDollar[1].string)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:309
		{
			yyVAL.string = "+"
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:312
		{
			yyVAL.string = "-"
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:316
		{
			yyVAL.string = "*"
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:320
		{
			yyVAL.string = "/"
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:324
		{
			yyVAL.string = "%"
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:328
		{
			yyVAL.string = "!"
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:332
		{
			yyVAL.string = "&&"
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:336
		{
			yyVAL.string = "<"
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:340
		{
			yyVAL.string = ">"
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:344
		{
			yyVAL.string = "||"
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:348
		{
			yyVAL.string = "^"
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:352
		{
			yyVAL.string = "=="
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:356
		{
			yyVAL.string = ">="
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line logi.y:360
		{
			yyVAL.string = "<="
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:365
		{
			yyVAL.node = appendNode(NodeOpBinaryExpression, yyDollar[1].node, yyDollar[3].node, newNode(NodeOpOperator, yyDollar[2].string))
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:370
		{
			yyVAL.node = newNode(NodeOpFunctionCall, yyDollar[1].string, yyDollar[3].node)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line logi.y:375
		{
			yyVAL.node = appendNode(NodeOpFunctionParams, yyDollar[1].node)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line logi.y:379
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[3].node)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line logi.y:383
		{
			yyVAL.node = appendNode(NodeOpFunctionParams)
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line logi.y:391
		{
			yyVAL.node = appendNode(NodeOpFunctionDefinition, newNode(NodeOpName, yyDollar[2].string), yyDollar[3].node, yyDollar[4].node)
		}
	}
	goto yystack /* stack new state and value */
}
