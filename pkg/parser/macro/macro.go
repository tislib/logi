// Code generated by goyacc -o macro.go macro.y. DO NOT EDIT.

//line macro.y:2
package macro

import __yyfmt__ "fmt"

//line macro.y:2

import (
	"github.com/tislib/logi/pkg/parser/lexer"
)

//line macro.y:10
type yySymType struct {
	yys      int
	node     yaccNode
	bool     bool
	number   interface{}
	string   string
	token    lexer.Token
	location lexer.Location
}

const token_number = 57346
const token_string = 57347
const token_identifier = 57348
const token_bool = 57349
const TypesKeyword = 57350
const SyntaxKeyword = 57351
const MacroKeyword = 57352
const BracketOpen = 57353
const BracketClose = 57354
const BraceOpen = 57355
const BraceClose = 57356
const Comma = 57357
const Colon = 57358
const Semicolon = 57359
const ParenOpen = 57360
const ParenClose = 57361
const Eol = 57362
const CodeBlock = 57363
const ExpressionBlock = 57364
const Equal = 57365
const GreaterThan = 57366
const LessThan = 57367
const Dash = 57368
const Dot = 57369
const Arrow = 57370
const Or = 57371
const Hash = 57372

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_number",
	"token_string",
	"token_identifier",
	"token_bool",
	"TypesKeyword",
	"SyntaxKeyword",
	"MacroKeyword",
	"BracketOpen",
	"BracketClose",
	"BraceOpen",
	"BraceClose",
	"Comma",
	"Colon",
	"Semicolon",
	"ParenOpen",
	"ParenClose",
	"Eol",
	"CodeBlock",
	"ExpressionBlock",
	"Equal",
	"GreaterThan",
	"LessThan",
	"Dash",
	"Dot",
	"Arrow",
	"Or",
	"Hash",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line macro.y:332

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 74,
	29, 51,
	-2, 65,
}

const yyPrivate = 57344

const yyLast = 213

var yyAct = [...]uint8{
	3, 52, 7, 9, 101, 11, 104, 84, 111, 13,
	43, 19, 83, 35, 96, 91, 16, 61, 117, 97,
	122, 45, 62, 24, 59, 92, 10, 30, 31, 58,
	5, 131, 56, 57, 39, 40, 60, 29, 63, 142,
	102, 68, 121, 144, 38, 105, 106, 42, 41, 66,
	65, 10, 10, 67, 36, 10, 141, 61, 100, 10,
	74, 5, 62, 78, 59, 79, 69, 21, 5, 58,
	36, 76, 56, 57, 61, 80, 60, 81, 75, 62,
	73, 59, 118, 20, 10, 10, 58, 99, 28, 56,
	57, 109, 107, 60, 136, 114, 115, 37, 112, 10,
	124, 23, 10, 10, 123, 5, 17, 146, 15, 119,
	125, 120, 6, 21, 113, 10, 130, 133, 116, 129,
	10, 126, 5, 127, 94, 137, 128, 135, 93, 108,
	33, 134, 26, 140, 109, 95, 112, 138, 61, 102,
	139, 77, 145, 62, 143, 59, 129, 147, 18, 12,
	58, 61, 21, 56, 57, 72, 62, 60, 59, 2,
	1, 8, 110, 58, 61, 5, 56, 57, 89, 62,
	60, 59, 47, 103, 55, 46, 58, 61, 10, 56,
	57, 132, 62, 60, 59, 54, 71, 53, 51, 58,
	70, 50, 56, 57, 98, 49, 60, 86, 87, 85,
	88, 48, 44, 82, 90, 25, 22, 34, 64, 32,
	27, 14, 4,
}

var yyPact = [...]int16{
	102, 102, 10, 65, 10, -1000, 143, 65, 10, 65,
	-1000, 95, -1000, 65, -1000, 10, 100, 142, 63, 93,
	-1000, -1000, 10, 119, 79, 63, 10, 10, 117, 47,
	64, 83, 63, 10, 48, 63, 171, 10, 47, 158,
	35, 63, 47, -1000, 11, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 51, 63,
	135, -1000, 10, 65, 145, 63, -1000, 47, 193, -1000,
	-4, 109, 124, -15, -1000, -8, 132, 34, 39, 32,
	63, 47, 114, 193, -1000, -1000, -1000, -1000, -1000, -1000,
	193, -1000, 171, -1000, 10, 10, 171, -9, 68, 63,
	-1000, 18, -5, 85, -1000, 133, -1000, 47, 193, -1000,
	111, 193, -1000, -1000, 6, 6, -1000, -1000, -1000, 63,
	47, -1000, 133, 82, 10, -1000, 193, -1000, 193, -1000,
	-1000, 134, 41, -1000, 47, 15, -1000, 39, 193, 133,
	31, 10, -1000, -1000, 88, 6, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 159, 212, 211, 210, 209, 208, 4, 207, 206,
	205, 13, 10, 12, 203, 202, 21, 201, 195, 194,
	191, 190, 1, 188, 187, 186, 185, 181, 175, 174,
	173, 6, 172, 7, 168, 162, 8, 160, 0, 11,
	155,
}

var yyR1 = [...]int8{
	0, 38, 38, 38, 39, 39, 40, 37, 37, 37,
	37, 1, 2, 3, 9, 9, 10, 8, 8, 8,
	11, 4, 4, 5, 6, 6, 6, 12, 12, 14,
	14, 13, 13, 33, 33, 33, 33, 33, 34, 36,
	36, 35, 35, 15, 15, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 20, 17, 21, 21, 18,
	19, 19, 23, 22, 24, 25, 25, 29, 30, 30,
	31, 31, 26, 27, 27, 28, 32, 7, 7,
}

var yyR2 = [...]int8{
	0, 1, 2, 0, 1, 2, 3, 2, 2, 1,
	3, 3, 2, 11, 3, 0, 5, 2, 3, 0,
	2, 3, 0, 5, 2, 3, 0, 1, 3, 1,
	3, 1, 2, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 4,
	2, 3, 1, 4, 3, 1, 4, 5, 1, 4,
	1, 2, 8, 1, 4, 1, 1, 1, 4,
}

var yyChk = [...]int16{
	-1000, -37, -1, -38, -2, 20, 10, -38, -1, -38,
	20, -38, 6, -38, -3, 13, -38, 6, 6, -39,
	20, 20, -9, 8, -38, -10, 13, -4, 9, -39,
	-38, -38, -5, 13, -8, -11, 6, 14, -39, -38,
	-38, -11, -39, -12, -15, -16, -28, -32, -17, -18,
	-20, -23, -22, -24, -26, -29, 21, 22, 18, 13,
	25, 6, 11, -38, -6, -12, 14, -39, 30, -16,
	-21, -25, -40, -16, -22, 27, -39, 6, -38, -38,
	-12, -39, -14, -13, -33, 6, 4, 5, 7, -34,
	11, 19, 29, 19, 15, 11, 29, 27, -19, -12,
	24, -7, 6, -30, -31, 6, 14, -39, 15, -33,
	-35, -36, -33, -16, -38, -38, -16, 27, 14, -12,
	-39, 24, 25, -38, 15, -7, -13, 12, 15, -33,
	-22, 25, -27, -22, -39, -7, 12, -38, -36, 6,
	-38, 15, 24, -31, 12, -38, 19, -22,
}

var yyDef = [...]int8{
	3, -2, 3, 9, 3, 1, 0, 8, 3, 7,
	2, 0, 12, 10, 11, 3, 0, 0, 0, 15,
	4, 5, 3, 0, 22, 0, 3, 3, 0, 14,
	19, 0, 0, 3, 3, 0, 0, 3, 21, 26,
	0, 0, 17, 20, 27, 43, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 75, 76, 0, 0,
	0, 62, 3, 13, 3, 0, 16, 18, 0, 44,
	0, 0, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 24, 28, 29, 31, 33, 34, 35, 36, 37,
	0, 56, 0, 64, 3, 3, 0, 0, 0, 0,
	55, 0, 77, 3, 68, 70, 23, 25, 0, 32,
	0, 41, 39, 58, 0, 0, 57, 6, 59, 0,
	60, 63, 0, 0, 3, 71, 30, 38, 0, 40,
	66, 0, 3, 73, 61, 0, 67, 0, 42, 0,
	0, 3, 78, 69, 0, 0, 72, 74,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:57
		{
			registerRootNode(yylex, yyDollar[1].node)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:62
		{
			registerRootNode(yylex, yyDollar[2].node)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:68
		{
			yyVAL.node = appendNode(NodeOpMacro, yyDollar[1].node, yyDollar[3].node)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:73
		{
			yyVAL.node = newNode(NodeOpSignature, nil, yyDollar[1].token, yyDollar[1].location, newNode(NodeOpName, yyDollar[2].string, yyDollar[2].token, yyDollar[2].location))
		}
	case 13:
		yyDollar = yyS[yypt-11 : yypt+1]
//line macro.y:85
		{
			assertEqual(yylex, yyDollar[3].string, "kind", "First identifier in macro body must be 'kind'")
			yyVAL.node = appendNode(NodeOpBody, newNode(NodeOpKind, yyDollar[4].string, yyDollar[4].token, yyDollar[4].location), yyDollar[6].node, yyDollar[8].node)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:91
		{
			yyVAL.node = newNode(NodeOpTypes, nil, yyDollar[1].token, yyDollar[1].location, yyDollar[2].node)
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line macro.y:95
		{
			yyVAL.node = newNode(NodeOpTypes, nil, emptyToken, emptyLocation)
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
//line macro.y:100
		{
			yyVAL.node = yyDollar[3].node
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:104
		{
			yyVAL.node = appendNode(NodeOpBody, yyDollar[1].node)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:107
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
//line macro.y:111
		{
			yyVAL.node = newNode(NodeOpBody, nil, emptyToken, emptyLocation)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:116
		{
			yyVAL.node = appendNode(NodeOpTypesStatement, newNode(NodeOpName, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location), yyDollar[2].node)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:121
		{
			yyVAL.node = newNode(NodeOpSyntax, nil, yyDollar[1].token, yyDollar[1].location, yyDollar[2].node)
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line macro.y:125
		{
			yyVAL.node = newNode(NodeOpSyntax, nil, emptyToken, emptyLocation)
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line macro.y:131
		{
			yyVAL.node = yyDollar[3].node
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:135
		{
			yyVAL.node = appendNode(NodeOpBody, yyDollar[1].node)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:138
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line macro.y:141
		{
			yyVAL.node = newNode(NodeOpBody, nil, emptyToken, emptyLocation)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:146
		{
			yyVAL.node = appendNode(NodeOpSyntaxStatement, yyDollar[1].node)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:149
		{
			yyVAL.node = appendNode(NodeOpSyntaxStatement, yyDollar[1].node, yyDollar[3].node)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:154
		{
			yyVAL.node = appendNode(NodeOpSyntaxExamples, yyDollar[1].node)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:157
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[3].node)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:162
		{
			yyVAL.node = appendNode(NodeOpSyntaxExample, yyDollar[1].node)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:165
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:170
		{
			yyVAL.node = newNode(NodeOpValueIdentifier, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:174
		{
			yyVAL.node = newNode(NodeOpValueNumber, yyDollar[1].number, yyDollar[1].token, yyDollar[1].location)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:177
		{
			yyVAL.node = newNode(NodeOpValueString, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:180
		{
			yyVAL.node = newNode(NodeOpValueBool, yyDollar[1].bool, yyDollar[1].token, yyDollar[1].location)
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:183
		{
			yyVAL.node = yyDollar[1].node
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:188
		{
			yyVAL.node = yyDollar[2].node
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:193
		{
			yyVAL.node = appendNode(NodeOpValueArrayItem, yyDollar[1].node)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:196
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:201
		{
			yyVAL.node = appendNode(NodeOpValueArray, yyDollar[1].node)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:204
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[3].node)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:209
		{
			yyVAL.node = appendNode(NodeOpSyntaxElements, yyDollar[1].node)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:213
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:220
		{
			yyVAL.node = newNode(NodeOpSyntaxTypeReferenceElement, yyDollar[2].string, yyDollar[2].token, yyDollar[2].location)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:225
		{
			yyVAL.node = yyDollar[2].node
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:230
		{
			yyVAL.node = appendNode(NodeOpSyntaxCombinationElement, yyDollar[1].node, yyDollar[3].node)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:234
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[3].node)
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:239
		{
			yyVAL.node = yyDollar[3].node
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:244
		{
			yyVAL.node = appendNode(NodeOpSyntaxStructureElement, yyDollar[1].node)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:248
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:253
		{
			yyVAL.node = newNode(NodeOpSyntaxKeywordElement, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:258
		{
			yyVAL.node = appendNode(NodeOpSyntaxVariableKeywordElement, newNode(NodeOpName, yyDollar[2].string, yyDollar[2].token, yyDollar[2].location), yyDollar[3].node)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:263
		{
			yyVAL.node = yyDollar[2].node
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:268
		{
			yyVAL.node = appendNode(NodeOpSyntaxParameterListElement, yyDollar[1].node)
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:272
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line macro.y:277
		{
			yyVAL.node = yyDollar[3].node
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:282
		{
			yyVAL.node = appendNode(NodeOpSyntaxAttributeListElement, yyDollar[1].node)
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:286
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:291
		{
			yyVAL.node = newNode(NodeOpName, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:295
		{
			yyVAL.node = newNode(NodeOpName, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location, yyDollar[2].node)
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
//line macro.y:300
		{
			yyVAL.node = yyDollar[5].node
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:305
		{
			yyVAL.node = appendNode(NodeOpSyntaxArgumentListElement, yyDollar[1].node)
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:309
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:314
		{
			yyVAL.node = newNode(NodeOpSyntaxCodeBlockElement, nil, yyDollar[1].token, yyDollar[1].location)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:319
		{
			yyVAL.node = newNode(NodeOpSyntaxExpressionBlockElement, nil, yyDollar[1].token, yyDollar[1].location)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:324
		{
			yyVAL.node = newNode(NodeOpTypeDef, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:328
		{
			yyVAL.node = newNode(NodeOpTypeDef, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
