// Code generated by goyacc -o macro.go macro.y. DO NOT EDIT.

//line macro.y:2
package macro

import __yyfmt__ "fmt"

//line macro.y:2

import (
	"github.com/tislib/logi/pkg/parser/lexer"
)

//line macro.y:10
type yySymType struct {
	yys      int
	node     yaccNode
	bool     bool
	number   interface{}
	string   string
	token    lexer.Token
	location lexer.Location
}

const token_number = 57346
const token_string = 57347
const token_identifier = 57348
const token_bool = 57349
const TypesKeyword = 57350
const SyntaxKeyword = 57351
const MacroKeyword = 57352
const BracketOpen = 57353
const BracketClose = 57354
const BraceOpen = 57355
const BraceClose = 57356
const Comma = 57357
const Colon = 57358
const Semicolon = 57359
const ParenOpen = 57360
const ParenClose = 57361
const Eol = 57362
const CodeBlock = 57363
const ExpressionBlock = 57364
const Equal = 57365
const GreaterThan = 57366
const LessThan = 57367
const Dash = 57368
const Dot = 57369
const Arrow = 57370
const Or = 57371

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_number",
	"token_string",
	"token_identifier",
	"token_bool",
	"TypesKeyword",
	"SyntaxKeyword",
	"MacroKeyword",
	"BracketOpen",
	"BracketClose",
	"BraceOpen",
	"BraceClose",
	"Comma",
	"Colon",
	"Semicolon",
	"ParenOpen",
	"ParenClose",
	"Eol",
	"CodeBlock",
	"ExpressionBlock",
	"Equal",
	"GreaterThan",
	"LessThan",
	"Dash",
	"Dot",
	"Arrow",
	"Or",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line macro.y:268

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 72,
	29, 35,
	-2, 49,
}

const yyPrivate = 57344

const yyLast = 203

var yyAct = [...]int8{
	3, 51, 7, 9, 93, 11, 43, 19, 90, 13,
	35, 80, 85, 44, 101, 86, 16, 10, 106, 121,
	105, 81, 111, 24, 91, 120, 108, 30, 31, 15,
	5, 5, 60, 29, 39, 40, 10, 61, 62, 58,
	38, 94, 89, 42, 57, 41, 64, 55, 56, 66,
	123, 59, 116, 73, 36, 10, 5, 67, 10, 72,
	10, 95, 76, 65, 77, 28, 74, 10, 5, 10,
	78, 71, 79, 37, 36, 23, 10, 17, 67, 10,
	6, 88, 21, 10, 98, 99, 96, 21, 10, 20,
	5, 10, 67, 107, 103, 97, 104, 125, 33, 100,
	110, 113, 67, 109, 83, 26, 84, 91, 82, 117,
	118, 114, 75, 119, 18, 115, 12, 67, 60, 70,
	1, 124, 122, 61, 46, 58, 126, 2, 92, 8,
	57, 60, 20, 55, 56, 54, 61, 59, 58, 102,
	45, 112, 53, 57, 60, 69, 55, 56, 52, 61,
	59, 58, 50, 68, 49, 87, 57, 60, 21, 55,
	56, 48, 61, 59, 58, 47, 25, 22, 34, 57,
	60, 5, 55, 56, 63, 61, 59, 58, 32, 27,
	14, 4, 57, 60, 10, 55, 56, 0, 61, 59,
	58, 0, 0, 0, 0, 57, 0, 0, 55, 56,
	0, 0, 59,
}

var yyPact = [...]int16{
	70, 70, 36, 63, 36, -1000, 110, 63, 36, 63,
	-1000, 16, -1000, 63, -1000, 36, 71, 108, 69, 67,
	-1000, -1000, 36, 92, 56, 69, 36, 36, 85, 62,
	68, 59, 69, 36, 48, 69, 177, 36, 62, 164,
	49, 69, 62, 177, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 26, 69, 106,
	-1000, 36, 63, 151, 112, -1000, 62, -1000, -8, 89,
	95, -17, -1000, -12, 138, 18, 35, 47, 112, 62,
	-1000, 177, -1000, 36, 36, 177, -13, 125, 112, -1000,
	-4, -7, 11, -1000, 101, -1000, 62, -1000, -3, -3,
	-1000, -1000, -1000, 112, 62, -1000, 101, 40, 36, -1000,
	-1000, 104, 10, -1000, 62, -5, -1000, 35, 101, 38,
	36, -1000, -1000, 78, -3, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 127, 181, 180, 179, 178, 174, 8, 168, 167,
	166, 10, 6, 13, 165, 161, 155, 154, 153, 1,
	152, 148, 145, 142, 141, 140, 135, 128, 4, 124,
	120, 0, 7, 119,
}

var yyR1 = [...]int8{
	0, 31, 31, 31, 32, 32, 33, 30, 30, 30,
	30, 1, 2, 3, 9, 9, 10, 8, 8, 8,
	11, 4, 4, 5, 6, 6, 6, 12, 12, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 17,
	14, 18, 18, 15, 16, 16, 20, 19, 21, 22,
	22, 26, 27, 27, 28, 28, 23, 24, 24, 25,
	29, 7, 7,
}

var yyR2 = [...]int8{
	0, 1, 2, 0, 1, 2, 3, 2, 2, 1,
	3, 3, 2, 11, 3, 0, 5, 2, 3, 0,
	2, 3, 0, 5, 2, 3, 0, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 4, 2, 3, 1, 4, 3, 1,
	4, 5, 1, 4, 1, 2, 8, 1, 4, 1,
	1, 1, 4,
}

var yyChk = [...]int16{
	-1000, -30, -1, -31, -2, 20, 10, -31, -1, -31,
	20, -31, 6, -31, -3, 13, -31, 6, 6, -32,
	20, 20, -9, 8, -31, -10, 13, -4, 9, -32,
	-31, -31, -5, 13, -8, -11, 6, 14, -32, -31,
	-31, -11, -32, -12, -13, -25, -29, -14, -15, -17,
	-20, -19, -21, -23, -26, 21, 22, 18, 13, 25,
	6, 11, -31, -6, -12, 14, -32, -13, -18, -22,
	-33, -13, -19, 27, -32, 6, -31, -31, -12, -32,
	19, 29, 19, 15, 11, 29, 27, -16, -12, 24,
	-7, 6, -27, -28, 6, 14, -32, -13, -31, -31,
	-13, 27, 14, -12, -32, 24, 25, -31, 15, -7,
	-19, 25, -24, -19, -32, -7, 12, -31, 6, -31,
	15, 24, -28, 12, -31, 19, -19,
}

var yyDef = [...]int8{
	3, -2, 3, 9, 3, 1, 0, 8, 3, 7,
	2, 0, 12, 10, 11, 3, 0, 0, 0, 15,
	4, 5, 3, 0, 22, 0, 3, 3, 0, 14,
	19, 0, 0, 3, 3, 0, 0, 3, 21, 26,
	0, 0, 17, 20, 27, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 59, 60, 0, 0, 0,
	46, 3, 13, 3, 0, 16, 18, 28, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 24,
	40, 0, 48, 3, 3, 0, 0, 0, 0, 39,
	0, 61, 3, 52, 54, 23, 25, 42, 0, 0,
	41, 6, 43, 0, 44, 47, 0, 0, 3, 55,
	50, 0, 3, 57, 45, 0, 51, 0, 0, 0,
	3, 62, 53, 0, 0, 56, 58,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:56
		{
			registerRootNode(yylex, yyDollar[1].node)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:61
		{
			registerRootNode(yylex, yyDollar[2].node)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:67
		{
			yyVAL.node = appendNode(NodeOpMacro, yyDollar[1].node, yyDollar[3].node)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:72
		{
			yyVAL.node = newNode(NodeOpSignature, nil, yyDollar[1].token, yyDollar[1].location, newNode(NodeOpName, yyDollar[2].string, yyDollar[2].token, yyDollar[2].location))
		}
	case 13:
		yyDollar = yyS[yypt-11 : yypt+1]
//line macro.y:84
		{
			assertEqual(yylex, yyDollar[3].string, "kind", "First identifier in macro body must be 'kind'")
			yyVAL.node = appendNode(NodeOpBody, newNode(NodeOpKind, yyDollar[4].string, yyDollar[4].token, yyDollar[4].location), yyDollar[6].node, yyDollar[8].node)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:90
		{
			yyVAL.node = newNode(NodeOpTypes, nil, yyDollar[1].token, yyDollar[1].location, yyDollar[2].node)
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line macro.y:94
		{
			yyVAL.node = newNode(NodeOpTypes, nil, emptyToken, emptyLocation)
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
//line macro.y:99
		{
			yyVAL.node = yyDollar[3].node
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:103
		{
			yyVAL.node = appendNode(NodeOpBody, yyDollar[1].node)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:106
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
//line macro.y:110
		{
			yyVAL.node = newNode(NodeOpBody, nil, emptyToken, emptyLocation)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:115
		{
			yyVAL.node = appendNode(NodeOpTypesStatement, newNode(NodeOpName, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location), yyDollar[2].node)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:120
		{
			yyVAL.node = newNode(NodeOpSyntax, nil, yyDollar[1].token, yyDollar[1].location, yyDollar[2].node)
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line macro.y:124
		{
			yyVAL.node = newNode(NodeOpSyntax, nil, emptyToken, emptyLocation)
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line macro.y:130
		{
			yyVAL.node = yyDollar[3].node
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:134
		{
			yyVAL.node = appendNode(NodeOpBody, yyDollar[1].node)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:137
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
//line macro.y:140
		{
			yyVAL.node = newNode(NodeOpBody, nil, emptyToken, emptyLocation)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:145
		{
			yyVAL.node = appendNode(NodeOpSyntaxStatement, yyDollar[1].node)
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:149
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:156
		{
			yyVAL.node = newNode(NodeOpSyntaxTypeReferenceElement, yyDollar[2].string, yyDollar[2].token, yyDollar[2].location)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:161
		{
			yyVAL.node = yyDollar[2].node
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:166
		{
			yyVAL.node = appendNode(NodeOpSyntaxCombinationElement, yyDollar[1].node, yyDollar[3].node)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:170
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[3].node)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:175
		{
			yyVAL.node = yyDollar[3].node
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:180
		{
			yyVAL.node = appendNode(NodeOpSyntaxStructureElement, yyDollar[1].node)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:184
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[2].node)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:189
		{
			yyVAL.node = newNode(NodeOpSyntaxKeywordElement, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:194
		{
			yyVAL.node = appendNode(NodeOpSyntaxVariableKeywordElement, newNode(NodeOpName, yyDollar[2].string, yyDollar[2].token, yyDollar[2].location), yyDollar[3].node)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line macro.y:199
		{
			yyVAL.node = yyDollar[2].node
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:204
		{
			yyVAL.node = appendNode(NodeOpSyntaxParameterListElement, yyDollar[1].node)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:208
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 51:
		yyDollar = yyS[yypt-5 : yypt+1]
//line macro.y:213
		{
			yyVAL.node = yyDollar[3].node
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:218
		{
			yyVAL.node = appendNode(NodeOpSyntaxAttributeListElement, yyDollar[1].node)
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:222
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:227
		{
			yyVAL.node = newNode(NodeOpName, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line macro.y:231
		{
			yyVAL.node = newNode(NodeOpValue, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location, yyDollar[2].node)
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
//line macro.y:236
		{
			yyVAL.node = yyDollar[5].node
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:241
		{
			yyVAL.node = appendNode(NodeOpSyntaxArgumentListElement, yyDollar[1].node)
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:245
		{
			yyVAL.node = appendNodeTo(&yyDollar[1].node, yyDollar[4].node)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:250
		{
			yyVAL.node = newNode(NodeOpSyntaxCodeBlockElement, nil, yyDollar[1].token, yyDollar[1].location)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:255
		{
			yyVAL.node = newNode(NodeOpSyntaxExpressionBlockElement, nil, yyDollar[1].token, yyDollar[1].location)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line macro.y:260
		{
			yyVAL.node = newNode(NodeOpTypeDef, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location)
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line macro.y:264
		{
			yyVAL.node = newNode(NodeOpTypeDef, yyDollar[1].string, yyDollar[1].token, yyDollar[1].location, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
